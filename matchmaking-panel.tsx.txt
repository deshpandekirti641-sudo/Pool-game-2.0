'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Trophy, Users, Clock, IndianRupee, Loader2, Gamepad2 } from 'lucide-react';

interface User {
  id: string;
  username: string;
  walletBalance: number;
  wins: number;
  losses: number;
}

interface MatchmakingPanelProps {
  user: User;
  onMatchStart: (matchId: string) => void;
}

interface MatchOption {
  betAmount: number;
  winAmount: number;
  serverFee: number;
  totalPrize: number;
}

export default function MatchmakingPanel({ user, onMatchStart }: MatchmakingPanelProps): JSX.Element {
  const [selectedBet, setSelectedBet] = useState<number>(1000);
  const [searching, setSearching] = useState<boolean>(false);
  const [searchProgress, setSearchProgress] = useState<number>(0);
  const [onlinePlayers, setOnlinePlayers] = useState<number>(128);

  const matchOptions: MatchOption[] = [
    { betAmount: 1000, winAmount: 1600, serverFee: 400, totalPrize: 2000 },
    { betAmount: 2000, winAmount: 3200, serverFee: 800, totalPrize: 4000 },
    { betAmount: 5000, winAmount: 8000, serverFee: 2000, totalPrize: 10000 },
    { betAmount: 10000, winAmount: 16000, serverFee: 4000, totalPrize: 20000 },
  ];

  // Simulate online players count
  useEffect(() => {
    const interval = setInterval(() => {
      setOnlinePlayers(prev => Math.max(50, Math.min(200, prev + Math.floor(Math.random() * 21) - 10)));
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  // Simulate matchmaking search
  useEffect(() => {
    if (searching) {
      const interval = setInterval(() => {
        setSearchProgress(prev => {
          if (prev >= 100) {
            clearInterval(interval);
            // Simulate match found
            setTimeout(() => {
              const matchId = `match_${Date.now()}`;
              onMatchStart(matchId);
              setSearching(false);
              setSearchProgress(0);
            }, 500);
            return 100;
          }
          return prev + 2;
        });
      }, 100);
      return () => clearInterval(interval);
    }
  }, [searching, onMatchStart]);

  const handleJoinQueue = (): void => {
    if (user.walletBalance < selectedBet) {
      alert('Insufficient balance. Please add funds to your wallet.');
      return;
    }
    setSearching(true);
    setSearchProgress(0);
  };

  const handleCancelSearch = (): void => {
    setSearching(false);
    setSearchProgress(0);
  };

  const selectedOption = matchOptions.find((opt: MatchOption) => opt.betAmount === selectedBet);

  return (
    <div className="space-y-4">
      {/* Online Players Card */}
      <Card className="bg-gradient-to-r from-blue-600 to-purple-600 text-white">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
                <Users className="w-6 h-6" />
              </div>
              <div>
                <p className="text-2xl font-bold">{onlinePlayers}</p>
                <p className="text-sm opacity-90">Players Online</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-sm">Live</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Match Lobby */}
      {!searching ? (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Trophy className="w-6 h-6 text-yellow-500" />
              Select Match Entry
            </CardTitle>
            <CardDescription>Choose your bet amount and start playing</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* Match Options */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              {matchOptions.map((option: MatchOption) => {
                const isSelected = option.betAmount === selectedBet;
                const canAfford = user.walletBalance >= option.betAmount;
                
                return (
                  <button
                    key={option.betAmount}
                    onClick={() => setSelectedBet(option.betAmount)}
                    disabled={!canAfford}
                    className={`p-4 rounded-lg border-2 transition-all text-left ${
                      isSelected 
                        ? 'border-green-600 bg-green-50' 
                        : canAfford 
                        ? 'border-gray-200 hover:border-green-400 bg-white' 
                        : 'border-gray-200 bg-gray-100 opacity-50 cursor-not-allowed'
                    }`}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <IndianRupee className="w-4 h-4" />
                          <span className="text-2xl font-bold">{option.betAmount / 100}</span>
                        </div>
                        <p className="text-xs text-gray-600">Entry Fee</p>
                      </div>
                      {isSelected && (
                        <Badge className="bg-green-600">Selected</Badge>
                      )}
                      {!canAfford && (
                        <Badge variant="destructive">Low Balance</Badge>
                      )}
                    </div>
                    
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Prize Pool:</span>
                        <span className="font-semibold text-gray-900">₹{option.totalPrize / 100}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Winner Gets:</span>
                        <span className="font-semibold text-green-600">₹{option.winAmount / 100}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600 text-xs">Server Fee:</span>
                        <span className="text-xs text-gray-500">₹{option.serverFee / 100}</span>
                      </div>
                    </div>
                  </button>
                );
              })}
            </div>

            {/* Match Details */}
            {selectedOption && (
              <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
                <CardContent className="p-4">
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="font-semibold text-green-900">Match Duration</span>
                      <div className="flex items-center gap-1 text-green-700">
                        <Clock className="w-4 h-4" />
                        <span className="font-bold">60 Seconds</span>
                      </div>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-semibold text-green-900">Format</span>
                      <Badge className="bg-green-600">1v1 Match</Badge>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="font-semibold text-green-900">Your Balance</span>
                      <span className={`font-bold ${user.walletBalance >= selectedBet ? 'text-green-600' : 'text-red-600'}`}>
                        ₹{(user.walletBalance / 100).toFixed(2)}
                      </span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Join Button */}
            <Button 
              onClick={handleJoinQueue}
              disabled={user.walletBalance < selectedBet}
              className="w-full h-14 text-lg bg-green-600 hover:bg-green-700"
            >
              <Gamepad2 className="w-6 h-6 mr-2" />
              Join Match • ₹{selectedBet / 100}
            </Button>

            {user.walletBalance < selectedBet && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3 text-sm text-red-800">
                <p className="font-semibold">Insufficient Balance</p>
                <p className="text-xs mt-1">Please add ₹{((selectedBet - user.walletBalance) / 100).toFixed(2)} to your wallet to join this match.</p>
              </div>
            )}
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="p-8">
            <div className="text-center space-y-6">
              <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full">
                <Loader2 className="w-10 h-10 text-white animate-spin" />
              </div>
              
              <div className="space-y-2">
                <h3 className="text-2xl font-bold text-green-900">Finding Opponent...</h3>
                <p className="text-gray-600">Matching you with a player of similar skill</p>
              </div>

              <div className="space-y-2">
                <Progress value={searchProgress} className="h-3" />
                <p className="text-sm text-gray-500">{Math.round(searchProgress)}% Complete</p>
              </div>

              <div className="grid grid-cols-3 gap-4 py-4">
                <div className="text-center">
                  <p className="text-2xl font-bold text-green-600">{onlinePlayers}</p>
                  <p className="text-xs text-gray-600">Online</p>
                </div>
                <div className="text-center">
                  <p className="text-2xl font-bold text-blue-600">₹{selectedBet / 100}</p>
                  <p className="text-xs text-gray-600">Entry</p>
                </div>
                <div className="text-center">
                  <p className="text-2xl font-bold text-yellow-600">60s</p>
                  <p className="text-xs text-gray-600">Duration</p>
                </div>
              </div>

              <Button 
                onClick={handleCancelSearch}
                variant="outline"
                className="w-full"
              >
                Cancel Search
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Game Rules */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Game Rules</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="space-y-2 text-sm text-gray-700">
            <li className="flex items-start gap-2">
              <span className="text-green-600 font-bold">•</span>
              <span>Match duration is exactly 60 seconds</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-green-600 font-bold">•</span>
              <span>Player with highest score wins the match</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-green-600 font-bold">•</span>
              <span>Winner receives 80% of prize pool (₹{selectedOption && (selectedOption.winAmount / 100)})</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-green-600 font-bold">•</span>
              <span>Server fee is 20% of prize pool (₹{selectedOption && (selectedOption.serverFee / 100)})</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-green-600 font-bold">•</span>
              <span>Prizes are automatically credited to winner wallet</span>
            </li>
            <li className="flex items-start gap-2">
              <span className="text-green-600 font-bold">•</span>
              <span>In case of a tie, both players receive 50% refund</span>
            </li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}
