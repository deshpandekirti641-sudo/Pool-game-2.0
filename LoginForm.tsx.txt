'use client';

/**
 * Login Form Component
 * Handles user registration and authentication
 */

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Trophy, Phone, Mail } from 'lucide-react';
import type { ContactMethod, RegistrationData } from './types';
import { validateMobileNumber, validateEmail, validateUsername } from './auth-utils';

interface LoginFormProps {
  onSendOTP: (data: RegistrationData) => void;
}

export default function LoginForm({ onSendOTP }: LoginFormProps): JSX.Element {
  const [contactMethod, setContactMethod] = useState<ContactMethod>('mobile');
  const [contactValue, setContactValue] = useState<string>('');
  const [username, setUsername] = useState<string>('');
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleSubmit = (): void => {
    const newErrors: Record<string, string> = {};

    // Validate contact
    if (!contactValue) {
      newErrors.contact = 'Contact is required';
    } else if (contactMethod === 'mobile' && !validateMobileNumber(contactValue)) {
      newErrors.contact = 'Invalid mobile number (10 digits, starting with 6-9)';
    } else if (contactMethod === 'email' && !validateEmail(contactValue)) {
      newErrors.contact = 'Invalid email address';
    }

    // Validate username
    if (!username) {
      newErrors.username = 'Username is required';
    } else if (!validateUsername(username)) {
      newErrors.username = 'Username must be 3-20 characters (letters, numbers, underscore)';
    }

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    setErrors({});
    onSendOTP({ contactMethod, contactValue, username });
  };

  return (
    <Card className="w-full max-w-md bg-white/95 backdrop-blur">
      <CardHeader className="text-center">
        <div className="mx-auto w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center mb-4">
          <Trophy className="w-10 h-10 text-white" />
        </div>
        <CardTitle className="text-3xl font-bold text-green-900">Pool Master</CardTitle>
        <CardDescription className="text-lg">Win Real Money Playing Pool</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label>Contact Method</Label>
          <div className="flex gap-2">
            <Button
              type="button"
              variant={contactMethod === 'mobile' ? 'default' : 'outline'}
              onClick={() => {
                setContactMethod('mobile');
                setContactValue('');
                setErrors({});
              }}
              className="flex-1"
            >
              <Phone className="w-4 h-4 mr-2" />
              Mobile
            </Button>
            <Button
              type="button"
              variant={contactMethod === 'email' ? 'default' : 'outline'}
              onClick={() => {
                setContactMethod('email');
                setContactValue('');
                setErrors({});
              }}
              className="flex-1"
            >
              <Mail className="w-4 h-4 mr-2" />
              Email
            </Button>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="contact">
            {contactMethod === 'mobile' ? 'Mobile Number' : 'Email Address'}
          </Label>
          <Input
            id="contact"
            type={contactMethod === 'mobile' ? 'tel' : 'email'}
            placeholder={contactMethod === 'mobile' ? '9876543210' : 'player@example.com'}
            value={contactValue}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
              setContactValue(e.target.value);
              if (errors.contact) {
                setErrors({ ...errors, contact: '' });
              }
            }}
            className={errors.contact ? 'border-red-500' : ''}
          />
          {errors.contact && (
            <p className="text-sm text-red-600">{errors.contact}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="username">Username</Label>
          <Input
            id="username"
            type="text"
            placeholder="Choose a username"
            value={username}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
              setUsername(e.target.value);
              if (errors.username) {
                setErrors({ ...errors, username: '' });
              }
            }}
            className={errors.username ? 'border-red-500' : ''}
          />
          {errors.username && (
            <p className="text-sm text-red-600">{errors.username}</p>
          )}
        </div>

        <Button onClick={handleSubmit} className="w-full bg-green-600 hover:bg-green-700">
          Send OTP
        </Button>

        <div className="text-sm text-center text-gray-600 mt-4">
          <p className="font-semibold text-green-800">ðŸ‡®ðŸ‡³ India Only â€¢ INR Currency</p>
          <p className="mt-2">â‚¹10 Entry â€¢ â‚¹16 Win â€¢ 60 Seconds</p>
        </div>
      </CardContent>
    </Card>
  );
}
